name: Python Application CI/CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.12"]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set Up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Chrome & ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable chromium-chromedriver

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Debug Chrome Installation
      run: |
        google-chrome --version
        chromedriver --version
        export PATH=$PATH:/usr/bin/chromedriver

    - name: Lint Code with flake8
      run: |
        echo "Running flake8 for code linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Tests with Debug Logging
      run: |
        pytest --cov=app --cov-report=xml --maxfail=5 --dist=loadscope -n auto -v --log-cli-level=DEBUG

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.xml
        if-no-files-found: warn

    - name: Deploy to Production
      if: success()
      run: |
        echo "Deploying application..."
        # Add deployment commands, e.g., SSH, Heroku, or AWS CLI.

    - name: Post-Run Summary (Success)
      if: success()
      run: |
        echo "✅ CI/CD Pipeline Succeeded!"
        echo "All checks and tests passed."

    - name: Post-Run Summary (Failure)
      if: failure()
      run: |
        echo "❌ CI/CD Pipeline Failed!"
        echo "Check the logs above for details."
