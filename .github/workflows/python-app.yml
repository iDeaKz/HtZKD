name: Python Application CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set Up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
         
    - name: Upgrade pip and install build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flake8 pytest pytest-cov pytest-xdist black isort bleak==0.21.3

    - name: Lint Code with flake8
      run: |
        echo "Running flake8 for code linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format Code with Black and Isort
      run: |
        echo "Checking code formatting with black and isort..."
        black --check . || echo "⚠️ Code is not formatted correctly. Run 'black .' locally to fix."
        isort --check-only . || echo "⚠️ Imports are not sorted. Run 'isort .' locally to fix."

    - name: Run Tests with pytest
      run: |
        echo "Running tests with pytest..."
        pytest --cov=app --cov-report=xml --maxfail=3 -n auto

    - name: Upload Coverage Report
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true
        flags: unittests

    - name: Deploy to Production
      if: success()
      run: |
        echo "Deploying application..."
        # Add your deployment commands here, e.g., SSH to a server and deploy, or use a deployment service API

    - name: Post-Run Summary (Failure)
      if: failure()
      run: |
        echo "❌ CI/CD Pipeline Failed!"
        echo "Check the logs above for details."

    - name: Post-Run Summary (Success)
      if: success()
      run: |
        echo "✅ CI/CD Pipeline Succeeded!"
        echo "Code quality checks and tests passed successfully."
